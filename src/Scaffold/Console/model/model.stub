<?php namespace {{studly_author}}\{{studly_plugin}}\Models;

use Carbon\Carbon;
use System\Models\File;
use October\Rain\Database\Model;
use October\Rain\Database\Builder;
use October\Rain\Database\Traits\SoftDelete;
use October\Rain\Database\Traits\Validation;
use OpenDroplet\Registry\Traits\Title;
use OpenDroplet\Registry\Traits\Code;
use OpenDroplet\Registry\Traits\Enable;
use OpenDroplet\Registry\Traits\Primary;
use OpenDroplet\Registry\Traits\Comment;

/**
 * {{studly_name}} Model
 *
 * @property int    $id
 * @property string $title
 * @property string $code
 * @property string $description
 * @property bool   $is_enabled
 * @property bool   $is_primary
 * @property File   $image
 * @property string $comment
 * @property Carbon $created_at
 * @property Carbon $updated_at
 * @property Carbon $deleted_at
 */
class {{studly_name}} extends Model
{

    use Title, Code, Enable, Primary, Comment; // extend model fields
    use SoftDelete, Validation;

    public $implement = [
        'OpenDroplet.Translate.Behaviors.TranslatableModel'
    ];

    /**
     * @var string The database table used by the model.
     */
    public $table = '{{lower_author}}_{{lower_plugin}}_{{snake_plural_name}}';

    /**
     * @var array Validation rules
     */
    public $rules = [
        'title'  => 'required|max:255',
        'code' => 'required|max:50|unique:{{lower_author}}_{{lower_plugin}}_{{snake_plural_name}}',
        // 'description' => 'required|min:100',
    ];

    /**
     * @var array Translatable attributes
     */
    public $translatable = [
        'title',
        'description',
    ];

    /**
     * @var array The attributes that should be mutated to dates
     */
    protected $dates = [
        'deleted_at'
    ];

    /**
     * @var bool Indicates if the model should be timestamped
     */
    public $timestamps = true;

    /**
     * @var array Guarded fields.
     */
    protected $guarded = ['*'];

    /**
     * @var array Fillable attributes
     */
    protected $fillable = ['title', 'code', 'description', 'is_enabled', 'is_primary', 'comment'];

    /**
     * @var array Hidden attributes
     */
    protected $hidden = ['is_enabled', 'is_primary', 'comment', 'created_at', 'updated_at', 'deleted_at'];

    /**
     * @var array Relations
     */
    public $hasOne = [];
    public $hasMany = [];
    public $belongsTo = [];
    public $belongsToMany = [];
    public $morphTo = [];
    public $morphOne = [];
    public $morphMany = [];
    public $attachOne = [
        'image' => File::class
    ];
    public $attachMany = [
        // 'images' => File::class
    ];

    /**
     * After delete event
     *
     * @return void
     */
    public function afterDelete()
    {
        if ($this->isSoftDelete())
            return;

        $this->image && $this->image->delete();
        parent::afterDelete();
    }

    /**
     * @param array $attributes
     *
     * @return {{studly_name}}
     */
    public static function createOrFirst(array $attributes)
    {
        return self::firstOrCreate($attributes);
    }
}
